/*
 * generated by Xtext
 */
grammar InternalStates;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package uk.ac.york.cs.statemachines.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.york.cs.statemachines.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import uk.ac.york.cs.statemachines.services.StatesGrammarAccess;

}

@parser::members {
 
 	private StatesGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(StatesGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleStateMachine
entryRuleStateMachine 
:
{ before(grammarAccess.getStateMachineRule()); }
	 ruleStateMachine
{ after(grammarAccess.getStateMachineRule()); } 
	 EOF 
;

// Rule StateMachine
ruleStateMachine
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateMachineAccess().getGroup()); }
(rule__StateMachine__Group__0)
{ after(grammarAccess.getStateMachineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getGroup()); }
(rule__Event__Group__0)
{ after(grammarAccess.getEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getGroup()); }
(rule__State__Group__0)
{ after(grammarAccess.getStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateMachine__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateMachine__Group__0__Impl
	rule__StateMachine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateMachineAccess().getStateMachineAction_0()); }
(

)
{ after(grammarAccess.getStateMachineAccess().getStateMachineAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateMachine__Group__1__Impl
	rule__StateMachine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateMachineAccess().getEventsKeyword_1()); }

	'events' 

{ after(grammarAccess.getStateMachineAccess().getEventsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateMachine__Group__2__Impl
	rule__StateMachine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getStateMachineAccess().getEventsAssignment_2()); }
(rule__StateMachine__EventsAssignment_2)
{ after(grammarAccess.getStateMachineAccess().getEventsAssignment_2()); }
)
(
{ before(grammarAccess.getStateMachineAccess().getEventsAssignment_2()); }
(rule__StateMachine__EventsAssignment_2)*
{ after(grammarAccess.getStateMachineAccess().getEventsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateMachine__Group__3__Impl
	rule__StateMachine__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateMachineAccess().getEndKeyword_3()); }

	'end' 

{ after(grammarAccess.getStateMachineAccess().getEndKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateMachine__Group__4__Impl
	rule__StateMachine__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateMachineAccess().getGroup_4()); }
(rule__StateMachine__Group_4__0)?
{ after(grammarAccess.getStateMachineAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateMachine__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getStateMachineAccess().getStatesAssignment_5()); }
(rule__StateMachine__StatesAssignment_5)
{ after(grammarAccess.getStateMachineAccess().getStatesAssignment_5()); }
)
(
{ before(grammarAccess.getStateMachineAccess().getStatesAssignment_5()); }
(rule__StateMachine__StatesAssignment_5)*
{ after(grammarAccess.getStateMachineAccess().getStatesAssignment_5()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}














rule__StateMachine__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateMachine__Group_4__0__Impl
	rule__StateMachine__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateMachineAccess().getResetEventsKeyword_4_0()); }

	'resetEvents' 

{ after(grammarAccess.getStateMachineAccess().getResetEventsKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateMachine__Group_4__1__Impl
	rule__StateMachine__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getStateMachineAccess().getResetEventsAssignment_4_1()); }
(rule__StateMachine__ResetEventsAssignment_4_1)
{ after(grammarAccess.getStateMachineAccess().getResetEventsAssignment_4_1()); }
)
(
{ before(grammarAccess.getStateMachineAccess().getResetEventsAssignment_4_1()); }
(rule__StateMachine__ResetEventsAssignment_4_1)*
{ after(grammarAccess.getStateMachineAccess().getResetEventsAssignment_4_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateMachine__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateMachineAccess().getEndKeyword_4_2()); }

	'end' 

{ after(grammarAccess.getStateMachineAccess().getEndKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Event__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventAction_0()); }
(

)
{ after(grammarAccess.getEventAccess().getEventAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNameAssignment_1()); }
(rule__Event__NameAssignment_1)
{ after(grammarAccess.getEventAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getCodeAssignment_2()); }
(rule__Event__CodeAssignment_2)
{ after(grammarAccess.getEventAccess().getCodeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__State__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStateKeyword_0()); }

	'state' 

{ after(grammarAccess.getStateAccess().getStateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameAssignment_1()); }
(rule__State__NameAssignment_1)
{ after(grammarAccess.getStateAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTransitionsAssignment_2()); }
(rule__State__TransitionsAssignment_2)*
{ after(grammarAccess.getStateAccess().getTransitionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getEndKeyword_3()); }

	'end' 

{ after(grammarAccess.getStateAccess().getEndKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTransitionAction_0()); }
(

)
{ after(grammarAccess.getTransitionAccess().getTransitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getEventAssignment_1()); }
(rule__Transition__EventAssignment_1)
{ after(grammarAccess.getTransitionAccess().getEventAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getEqualsSignGreaterThanSignKeyword_2()); }

	'=>' 

{ after(grammarAccess.getTransitionAccess().getEqualsSignGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getStateAssignment_3()); }
(rule__Transition__StateAssignment_3)
{ after(grammarAccess.getTransitionAccess().getStateAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__StateMachine__EventsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateMachineAccess().getEventsEventParserRuleCall_2_0()); }
	ruleEvent{ after(grammarAccess.getStateMachineAccess().getEventsEventParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__ResetEventsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateMachineAccess().getResetEventsEventCrossReference_4_1_0()); }
(
{ before(grammarAccess.getStateMachineAccess().getResetEventsEventIDTerminalRuleCall_4_1_0_1()); }
	RULE_ID{ after(grammarAccess.getStateMachineAccess().getResetEventsEventIDTerminalRuleCall_4_1_0_1()); }
)
{ after(grammarAccess.getStateMachineAccess().getResetEventsEventCrossReference_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__StatesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateMachineAccess().getStatesStateParserRuleCall_5_0()); }
	ruleState{ after(grammarAccess.getStateMachineAccess().getStatesStateParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__CodeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getCodeIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getCodeIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__TransitionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTransitionsTransitionParserRuleCall_2_0()); }
	ruleTransition{ after(grammarAccess.getStateAccess().getTransitionsTransitionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__EventAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getEventEventCrossReference_1_0()); }
(
{ before(grammarAccess.getTransitionAccess().getEventEventIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getEventEventIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getEventEventCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__StateAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getStateStateCrossReference_3_0()); }
(
{ before(grammarAccess.getTransitionAccess().getStateStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getStateStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getStateStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


