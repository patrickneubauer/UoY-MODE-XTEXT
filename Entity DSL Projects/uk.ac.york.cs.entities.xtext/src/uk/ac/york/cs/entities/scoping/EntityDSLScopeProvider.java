/*
 * generated by Xtext 2.12.0
 */
package uk.ac.york.cs.entities.scoping;

import java.util.Set;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import uk.ac.york.cs.entities.EntitiesPackage;
import uk.ac.york.cs.entities.Entity;
import uk.ac.york.cs.entities.Model;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class EntityDSLScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_Entity_extends(Entity entity, EReference eReference) {
		if (!eReference.equals(EntitiesPackage.Literals.ENTITY__EXTENDS)) {
			return IScope.NULLSCOPE;
		}
		return Scopes.scopeFor(getAllowedSuperTypes(entity));
	}

	private Set<Entity> getAllowedSuperTypes(Entity entity) {
		Model model = (Model) entity.eContainer();
		Set<Entity> allowedSuperTypes = model.getElements().stream()
				.filter(e -> e instanceof Entity && !e.equals(entity)).map(e -> (Entity) e).collect(Collectors.toSet());
		return allowedSuperTypes;
	}
	
	@Override
	public IScope getScope(EObject context, EReference eReference) {
		// Alternative implementation of scope_Entity_extends
		if (context instanceof Entity && eReference.equals(EntitiesPackage.Literals.ENTITY__EXTENDS)) {
			return Scopes.scopeFor(getAllowedSuperTypes((Entity)context));
		}
		return super.getScope(context, eReference);
	}
}
